###############################################################
# References
###############################################################
version: 2.1
references:
  restore_yarn_cache: &restore_yarn_cache
    restore_cache:
      keys:
        # when lock file changes, use increasingly general patterns to restore cache
        - yarn-packages-v1-{{ .Branch }}-{{ checksum "yarn.lock" }}
        - yarn-packages-v1-{{ .Branch }}-
        - yarn-packages-v1-

  save_yarn_cache: &save_yarn_cache
    save_cache:
      paths:
        - node_modules/
      key: yarn-packages-v1-{{ .Branch }}-{{ checksum "yarn.lock" }}

  # ...
  # The node module cache for macos machines must
  # be separate from the other node module cache
  # because the home directory differs.
  restore_yarn_cache_macos: &restore_yarn_cache_macos
    restore_cache:
      keys:
        # when lock file changes, use increasingly general patterns to restore cache
        - yarn-packages-macos-v1-{{ .Branch }}-{{ checksum "yarn.lock" }}
        - yarn-packages-macos-v1-{{ .Branch }}-
        - yarn-packages-macos-v2-
  save_yarn_cache_macos: &save_yarn_cache_macos
    save_cache:
      paths:
        - node_modules/
      key: yarn-packages-macos-v1-{{ .Branch }}-{{ checksum "yarn.lock" }}

  gems_cache_key_ios: &gems_cache_key_ios ios-bundle-v1-{{ checksum "Gemfile.lock" }}-{{ arch }}
  restore_gems_cache_ios: &restore_gems_cache_ios
    restore_cache:
      key: *gems_cache_key_ios
  save_gems_cache_ios: &save_gems_cache_ios
    save_cache:
      key: *gems_cache_key_ios
      paths:
        - vendor/bundle

  pods_cache_key_ios: &pods_cache_key_ios ios-pods-v1-{{ checksum "ios/Podfile.lock" }}-{{ arch }}
  restore_pods_cache_ios: &restore_pods_cache_ios
    restore_cache:
      key: *pods_cache_key_ios
  save_pods_cache_ios: &save_pods_cache_ios
    save_cache:
      key: *pods_cache_key_ios
      paths:
        - ios/Pods

  create_google_play_key: &create_google_play_key
    run:
      name: Create Google Play key
      command: echo $GOOGLE_PLAY_CREDS_JSON > android-developer-creds.json

  decode_android_key: &decode_android_key
    run:
      name: Decode Android keystore
      command: echo $ANDROID_KEYSTORE | base64 -di | tee release-key.keystore app/release-key.keystore >/dev/null

  create_production_env_file: &create_production_env_file
    run:
      name: Create production environment file
      command: rm .env && echo $PRODUCTION_ENV | base64 -di | tee .env >/dev/null

  create_staging_env_file: &create_staging_env_file
    run:
      name: Create staging environment file
      command: rm .env && echo $STAGING_ENV | base64 -di | tee .env >/dev/null

  gems_cache_key_android: &gems_cache_key_android android-bundle-v1-{{ checksum "../Gemfile.lock" }}-{{ arch }}

  gradle_cache_key: &gradle_cache_key jars-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}-{{ checksum "build.gradle" }}-{{ checksum "app/build.gradle" }}

  restore_gems_cache_android: &restore_gems_cache_android
    restore_cache:
      key: *gems_cache_key_android

  save_gems_cache_android: &save_gems_cache_android
    save_cache:
      key: *gems_cache_key_android
      paths:
        - ../vendor/bundle

  restore_gradle_cache: &restore_gradle_cache
    restore_cache:
      key: *gradle_cache_key

  save_gradle_cache: &save_gradle_cache
    save_cache:
      key: *gradle_cache_key
      paths:
        - ~/.gradle
        - ~/.m2

  android_dependencies: &android_dependencies
    run:
      name: Download Android Dependencies
      command: ./gradlew androidDependencies

###############################################################
# Workflows
###############################################################
workflows:
  # Trigger workflow for last commit (merge commits) to master
  # Run unit tests for sanity and if all looks good run semantic release
  # Semantic release will decide based on commit messages if another release is needed
  # Always run unit tests on master
  semantic-release:
    jobs:
      - verify_unit_tests:
          name: verify_unit_tests_sanity
          filters:
            branches:
              only:
                - master
      - verify_release:
          requires:
            - verify_unit_tests_sanity
          filters:
            branches:
              only:
                - master
            tags:
              # Would be good if we can ignore tagged commits but it won't trigger another build so it's fine
              ignore: /.*/

  # This gets triggers on every push to all branches except master
  # It verifies the branch, runs unit tests and builds iOS and Android
  verify-test-build:
    jobs:
      - verify_unit_tests:
          name: verify_unit_tests_staging
          staging: true
          filters:
            branches:
              ignore:
                - master
      - build_ios:
          requires:
            - verify_unit_tests_staging
          filters:
            branches:
              ignore:
                - master
      - build_android:
          requires:
            - verify_unit_tests_staging
          filters:
            branches:
              ignore:
                - master

  deploy-release-tag:
    jobs:
      - verify_unit_tests:
          name: verify_unit_tests_prod
          production: true
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - build_ios:
          requires:
            - verify_unit_tests_prod
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - build_android:
          requires:
            - verify_unit_tests_prod
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - deploy_ios:
          requires:
            - verify_unit_tests_prod
            - build_ios
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - deploy_android:
          requires:
            - verify_unit_tests_prod
            - build_android
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/

###############################################################
# Jobs
###############################################################

jobs:
  verify_unit_tests:
    working_directory: ~/project
    docker:
      - image: circleci/node:10
    parameters:
      production:
        type: boolean
        default: false
      staging:
        type: boolean
        default: false
    steps:
      - checkout
      - when:
          condition: <<parameters.production>>
          steps:
            - *create_production_env_file
      - when:
          condition: <<parameters.staging>>
          steps:
            - *create_staging_env_file
      - *restore_yarn_cache
      - run:
          name: Install node modules
          command: yarn --frozen-lockfile
      - *save_yarn_cache
      - run:
          name: Run unit tests
          command: yarn test --maxWorkers=2
      - persist_to_workspace:
          root: ~/project
          paths:
            - node_modules
            - .env

  verify_release:
    working_directory: ~/project
    docker:
      - image: circleci/node:10
    steps:
      - checkout:
          path: ~/project

      - attach_workspace:
          at: ~/project

      - run:
          name: Semantic release
          command: yarn release

  build_android:
    working_directory: ~/project/android
    docker:
      - image: circleci/android:api-28-node8-alpha
    steps:
      - checkout:
          path: ~/project

      - attach_workspace:
          at: ~/project

      - *restore_gradle_cache
      - *android_dependencies
      - *save_gradle_cache

      - *restore_gems_cache_android
      - run:
          name: Bundle install
          command: bundle install
          working_directory: ~/project
      - *save_gems_cache_android

      - *decode_android_key

      - run:
          name: Build android APK
          command: bundle exec fastlane assemble_android_build

      - store_artifacts:
          path: app/build/outputs/bundle
          destination: /apk/

      - persist_to_workspace:
          root: ~/project
          paths:
            - android/app/build/outputs/bundle

  build_ios:
    macos:
      xcode: '10.1.0'
    working_directory: ~/project
    environment:
      FL_OUTPUT_DIR: output
    shell: /bin/bash --login -o pipefail
    steps:
      - checkout
      - run:
          name: Fetch CocoaPods Specs
          command: |
            curl https://cocoapods-specs.circleci.com/fetch-cocoapods-repo-from-s3.sh | bash -s cf
      - *restore_yarn_cache_macos
      - run:
          name: Install node modules
          command: yarn --frozen-lockfile
      - *save_yarn_cache_macos
      - *restore_gems_cache_ios
      - run:
          name: Bundle install
          command: bundle install
      - *save_gems_cache_ios
      - *restore_pods_cache_ios
      - run:
          name: Install Pods
          command: bundle exec pod install --verbose
          working_directory: ios
      - *save_pods_cache_ios
      - run:
          name: Build iOS IPA
          command: bundle exec fastlane assemble_ios_build
          working_directory: ios
          no_output_timeout: 30m

      - store_artifacts:
          path: ios/output/gym/
          destination: /ipa/

      - persist_to_workspace:
          root: ~/project
          paths:
            - ios/output/gym
  # ...
  deploy_ios:
    macos:
      xcode: '10.3.0'
    working_directory: ~/project
    environment:
      FL_OUTPUT_DIR: output
    shell: /bin/bash --login -o pipefail
    steps:
      - checkout:
          path: ~/project
      - attach_workspace:
          at: ~/project
      - *restore_gems_cache_ios
      - run:
          name: Bundle install
          command: bundle install
      - run:
          name: Deploy iOS ipa
          command: bundle exec fastlane deploy
          working_directory: ios

  deploy_android:
    working_directory: ~/project/android
    docker:
      - image: circleci/android:api-28-node8-alpha
    steps:
      - checkout:
          path: ~/project
      - *restore_gems_cache_android
      - run:
          name: Bundle install
          command: bundle install
          working_directory: ~/project
      - attach_workspace:
          at: ~/project
      - *create_google_play_key
      - run:
          name: Deploy Android Bundle to Google Play internal track
          command: bundle exec fastlane deploy_android
      - store_artifacts:
          path: app/build/outputs/apk/
          destination: /apk/
